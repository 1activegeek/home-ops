apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "homarr.fullname" . }}
  labels:
    {{- include "homarr.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  strategy:
    type: {{ include "homarr.validatedStrategyType" . }}
  selector:
    matchLabels:
      {{- include "homarr.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "homarr.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.rbac.enabled }}
      serviceAccountName: "{{ .Release.Name }}-sa"
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}

      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            {{- range $key, $portSpec := .Values.containerPorts }}
              {{- if not $portSpec.disabled }}
            - name: {{ $key }}
              containerPort: {{ int $portSpec.port }}
              protocol: {{ $portSpec.protocol }}
              {{- end }}
            {{- end }}
          {{- if .Values.livenessProbe }}
          livenessProbe:
{{ toYaml .Values.livenessProbe | indent 12 }}
            initialDelaySeconds: 10
            timeoutSeconds: 1
            periodSeconds: 10
            failureThreshold: 3
          {{- end }}
          {{- if .Values.readinessProbe }}
          readinessProbe:
{{ toYaml .Values.readinessProbe | indent 12 }}
            initialDelaySeconds: 10
            timeoutSeconds: 1
            periodSeconds: 10
            failureThreshold: 3
          {{- end }}
          env:
            {{- if .Values.rbac.enabled }}
            - name: KUBERNETES_SERVICE_ACCOUNT_NAME
              value: {{ .Release.Name }}-sa
            {{- end }}
            - name: ENABLE_DOCKER
              value: "false"
            - name: ENABLE_KUBERNETES
              value: {{ .Values.rbac.enabled | ternary "true" "false" | quote }}
            {{- range $key, $value := .Values.env }}
            - name: {{ $key }}
              value: "{{ $value }}"
            {{- end }}
            {{- if .Values.database.migrationEnabled}}
            - name: DB_MIGRATIONS_DISABLED
              value: "false"
            {{- end }}
            {{- if eq .Values.database.type "sqlite" }}
            - name: DB_DRIVER
              value: "better-sqlite3"
            - name: DB_DIALECT
              value: "sqlite"
            - name: DB_URL
              value: "{{ printf "%s/db.sqlite" .Values.persistence.homarrDatabase.mountPath }}"
            {{- else if eq .Values.database.type "mysql" }}
            - name: DB_DRIVER
              value: "mysql2"
            - name: DB_DIALECT
              value: "mysql"
            - name: DB_URL
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.envSecrets.dbCredentials.existingSecret }}
                  key: {{ .Values.envSecrets.dbCredentials.dbUrlKey }}
            {{- else if eq .Values.database.type "postgresql" }}
            - name: DB_DRIVER
              value: "node-postgres"
            - name: DB_DIALECT
              value: "postgresql"
            - name: DB_URL
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.envSecrets.dbCredentials.existingSecret }}
                  key: {{ .Values.envSecrets.dbCredentials.dbUrlKey }}
            {{- end }}

            {{- if has "ldap" (splitList "," .Values.env.AUTH_PROVIDERS) }}
            - name: AUTH_LDAP_BIND_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.envSecrets.authLdapCredentials.existingSecret }}
                  key: {{ .Values.envSecrets.authLdapCredentials.ldapBindingPassword }}
            {{- end }}

            {{- if has "oidc" (splitList "," .Values.env.AUTH_PROVIDERS) }}
            - name: AUTH_OIDC_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.envSecrets.authOidcCredentials.existingSecret }}
                  key: {{ .Values.envSecrets.authOidcCredentials.oidcClientId }}
            - name: AUTH_OIDC_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.envSecrets.authOidcCredentials.existingSecret }}
                  key: {{ .Values.envSecrets.authOidcCredentials.oidcClientSecret }}
            {{- end }}
            - name: SECRET_ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.envSecrets.dbEncryption.existingSecret }}
                  key: {{ .Values.envSecrets.dbEncryption.key }}
            - name: HOMARR_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.envSecrets.homarrCredentials.existingSecret }}
                  key: {{ .Values.envSecrets.homarrCredentials.passwordKey }}

          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
          {{- if .Values.persistence.homarrTrustedCerts.enabled }}
            {{- if eq .Values.persistence.homarrTrustedCerts.type "configmap" }}
              {{- range $key, $_ := .Values.persistence.homarrTrustedCerts.certificates }}
            - name: {{ include "homarr.fullname" $ }}-trusted-certificates
              mountPath: {{ $.Values.persistence.homarrTrustedCerts.mountPath }}/{{ $key }}
              subPath: {{ $key }}
              readOnly: true
              {{- end }}
            {{- else if eq .Values.persistence.homarrTrustedCerts.type "secret" }}
              {{- range $key, $_ := .Values.persistence.homarrTrustedCerts.certificates }}
            - name: {{ include "homarr.fullname" $ }}-trusted-certificates
              mountPath: {{ $.Values.persistence.homarrTrustedCerts.mountPath }}/{{ $key }}
              subPath: {{ $key }}
              readOnly: true
                {{- end }}
            {{- else if eq .Values.persistence.homarrTrustedCerts.type "existingSecret" }}
              {{- range $key := .Values.persistence.homarrTrustedCerts.existingSecretKeys }}
            - name: {{ include "homarr.fullname" $ }}-trusted-certificates
              mountPath: {{ $.Values.persistence.homarrTrustedCerts.mountPath }}/{{ $key }}
              subPath: {{ $key }}
              readOnly: true
              {{- end }}
            {{- end }}
          {{- end }}
          {{- if .Values.persistence.homarrDatabase.enabled }}
            - name: {{ .Values.persistence.homarrDatabase.name }}
              mountPath: {{ .Values.persistence.homarrDatabase.mountPath }}
          {{- end }}

      volumes:
      {{- if .Values.persistence.homarrTrustedCerts.enabled }}
        - name: {{ include "homarr.fullname" . }}-trusted-certificates
        {{- if eq .Values.persistence.homarrTrustedCerts.type "configmap" }}
          configMap:
            name: {{ include "homarr.fullname" . }}-trusted-certificates-cm
        {{- else if eq .Values.persistence.homarrTrustedCerts.type "secret" }}
          secret:
            secretName: {{ include "homarr.fullname" . }}-trusted-certificates-secret
        {{- else if eq .Values.persistence.homarrTrustedCerts.type "existingSecret" }}
          secret:
            secretName: {{ .Values.persistence.homarrTrustedCerts.existingSecretName }}
        {{- end }}
      {{- end }}
      {{- if .Values.persistence.homarrDatabase.enabled }}
        - name: {{ .Values.persistence.homarrDatabase.name }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.homarrDatabase.name }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.hostAliases }}
      hostAliases: {{ toYaml . | nindent 8 }}
      {{- end }}